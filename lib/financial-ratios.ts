export type MetricCategory =
  | "Profitability"
  | "Efficiency"
  | "Capital Adequacy"
  | "Asset Quality"
  | "Liquidity"
  | "Valuation"
  | "Leverage & Capital Adequacy"
  | "Funding & Structure"
  | "Other"
  | "Market Risk"
  | "Geographic Risk Spread"
  | "Operational"

export interface MetricValue {
  quarter: string // e.g., "Jul-Sep 2024"
  value: number
  yoyChange?: number // Year-over-year change
  qoqChange?: number // Quarter-over-quarter change
}

export interface PeerMetricValue {
  bank: string // "Our Bank", "Peer A", "Peer B", "Peer C", "Industry Avg"
  value: number
  yoyChange?: number // Add YoY change for peer comparison
  qoqChange?: number // Add QoQ change for peer comparison
}

export interface FinancialRatio {
  id: string // Unique identifier for the ratio (e.g., "ROA", "CET1")
  name: string // Display name (e.g., "Return on Assets (ROA)")
  category: MetricCategory
  unit: string // e.g., "%", "x", "$M"
  description: string // Short description of the ratio
  formula: string // The mathematical formula for the ratio
  higherMeans: string // Interpretation of a higher value
  lowerMeans: string // Interpretation of a lower value
  historicalData: MetricValue[] // Data for "Our Bank" over time (last 4 quarters)
  peerData: PeerMetricValue[] // Current quarter data for peers
  isPopular?: boolean // Flag for popular metrics to show in card view
}

// Helper to generate realistic interconnected historical data
const generateRealisticHistoricalData = (
  baseValue: number,
  unit: string,
  quarters: string[],
  trendDirection: "improving" | "declining" | "stable",
  volatility: "low" | "medium" | "high",
): MetricValue[] => {
  const data: MetricValue[] = []
  let currentValue = baseValue

  const volatilityMultiplier = volatility === "low" ? 0.5 : volatility === "medium" ? 1.0 : 1.5
  const trendMultiplier = trendDirection === "improving" ? 1.02 : trendDirection === "declining" ? 0.98 : 1.0

  for (let i = 0; i < quarters.length; i++) {
    const quarter = quarters[i]

    // Apply trend and some randomness
    if (i > 0) {
      const trendEffect = (trendMultiplier - 1) * 100
      const randomEffect = (Math.random() * 2 - 1) * volatilityMultiplier
      const qoqChange = trendEffect + randomEffect
      currentValue = currentValue * (1 + qoqChange / 100)
    }

    // Calculate YoY change (comparing to same quarter previous year)
    const yoyChange =
      i === 0
        ? trendDirection === "improving"
          ? 5 + Math.random() * 5
          : trendDirection === "declining"
            ? -5 - Math.random() * 5
            : Math.random() * 4 - 2
        : (currentValue / baseValue - 1) * 100 + (Math.random() * 2 - 1)

    const qoqChangeValue = i === 0 ? 0 : (currentValue / data[i - 1].value - 1) * 100

    data.push({
      quarter,
      value: Number.parseFloat(currentValue.toFixed(2)),
      yoyChange: Number.parseFloat(yoyChange.toFixed(1)),
      qoqChange: Number.parseFloat(qoqChangeValue.toFixed(1)),
    })
  }
  return data.reverse() // Ensure latest quarter is first
}

// Helper to generate realistic peer data with YoY and QoQ changes
const generateRealisticPeerData = (ourBankValue: number, ourBankYoY: number, ourBankQoQ: number): PeerMetricValue[] => {
  const peers = ["Peer A", "Peer B", "Peer C", "Industry Avg"]
  const peerValues: PeerMetricValue[] = [
    {
      bank: "Our Bank",
      value: ourBankValue,
      yoyChange: ourBankYoY,
      qoqChange: ourBankQoQ,
    },
  ]

  peers.forEach((peer) => {
    // Create realistic peer variations
    const variance = (Math.random() * 0.3 - 0.15) * ourBankValue // +/- 15% variance
    const yoyVariance = Math.random() * 4 - 2 // +/- 2% variance in YoY
    const qoqVariance = Math.random() * 2 - 1 // +/- 1% variance in QoQ

    peerValues.push({
      bank: peer,
      value: Number.parseFloat((ourBankValue + variance).toFixed(2)),
      yoyChange: Number.parseFloat((ourBankYoY + yoyVariance).toFixed(1)),
      qoqChange: Number.parseFloat((ourBankQoQ + qoqVariance).toFixed(1)),
    })
  })
  return peerValues
}

const quarters = ["Oct-Dec 2023", "Jan-Mar 2024", "Apr-Jun 2024", "Jul-Sep 2024"] // Oldest to Newest

export const financialRatios: FinancialRatio[] = [
  {
    id: "NIM",
    name: "Net Interest Margin (NIM)",
    category: "Profitability",
    unit: "%",
    description:
      "Measures the difference between the interest income generated by banks and the interest paid out to their lenders, relative to the amount of their interest-earning assets.",
    formula: "Net Interest Income / Average Earning Assets",
    higherMeans: "More profitable lending operations",
    lowerMeans: "Lower interest income or inefficiency",
    historicalData: generateRealisticHistoricalData(3.45, "%", quarters, "improving", "low"),
    peerData: generateRealisticPeerData(3.45, 0.15, 0.08),
    isPopular: true,
  },
  {
    id: "ROA",
    name: "Return on Assets (ROA)",
    category: "Profitability",
    unit: "%",
    description: "Indicates how profitable a company is in relation to its total assets.",
    formula: "Net Income / Average Total Assets",
    higherMeans: "Efficient use of assets",
    lowerMeans: "Inefficient or unprofitable asset usage",
    historicalData: generateRealisticHistoricalData(1.28, "%", quarters, "improving", "medium"),
    peerData: generateRealisticPeerData(1.28, 0.05, 0.02),
    isPopular: true,
  },
  {
    id: "ROE",
    name: "Return on Equity (ROE)",
    category: "Profitability",
    unit: "%",
    description:
      "Measures the rate of return on the ownership interest (shareholders' equity) of the common stock owners.",
    formula: "Net Income / Avg. Shareholders' Equity",
    higherMeans: "Higher returns to shareholders",
    lowerMeans: "Low profitability or overcapitalization",
    historicalData: generateRealisticHistoricalData(12.8, "%", quarters, "improving", "medium"),
    peerData: generateRealisticPeerData(12.8, 0.8, 0.3),
    isPopular: true,
  },
  {
    id: "ER",
    name: "Efficiency Ratio",
    category: "Efficiency",
    unit: "%",
    description: "Measures a bank's overhead as a percentage of its revenue.",
    formula: "Non-Interest Exp / (Net Int Inc + Non-Int Inc)",
    higherMeans: "Better cost control",
    lowerMeans: "Higher operating inefficiencies",
    historicalData: generateRealisticHistoricalData(58.2, "%", quarters, "improving", "low"),
    peerData: generateRealisticPeerData(58.2, -1.6, -0.8),
    isPopular: true,
  },
  {
    id: "CAR",
    name: "Capital Adequacy Ratio (CAR)",
    category: "Capital Adequacy",
    unit: "%",
    description: "Capital buffer to absorb potential losses",
    formula: "(Tier 1 + Tier 2 Capital) / Risk-Weighted Assets",
    higherMeans: "Strong solvency and risk absorption",
    lowerMeans: "Higher risk of insolvency",
    historicalData: generateRealisticHistoricalData(14.5, "%", quarters, "stable", "low"),
    peerData: generateRealisticPeerData(14.5, 0.2, 0.1),
    isPopular: true,
  },
  {
    id: "CET1",
    name: "Common Equity Tier 1 (CET1) Ratio",
    category: "Capital Adequacy",
    unit: "%",
    description: "Strength of core equity capital",
    formula: "CET1 Capital / Risk-Weighted Assets",
    higherMeans: "High-quality capital buffer",
    lowerMeans: "Weaker capital structure",
    historicalData: generateRealisticHistoricalData(12.1, "%", quarters, "stable", "low"),
    peerData: generateRealisticPeerData(12.1, 0.1, 0.05),
    isPopular: true,
  },
  {
    id: "NPLR",
    name: "Non-Performing Loan (NPL) Ratio",
    category: "Asset Quality",
    unit: "%",
    description: "Indicates credit risk and loan quality",
    formula: "Non-Performing Loans / Gross Loans",
    higherMeans: "Under control if improving",
    lowerMeans: "Higher credit risk or poor underwriting",
    historicalData: generateRealisticHistoricalData(1.8, "%", quarters, "declining", "medium"),
    peerData: generateRealisticPeerData(1.8, -0.1, -0.05),
    isPopular: true,
  },
  {
    id: "LDR",
    name: "Loan-to-Deposit Ratio (LDR)",
    category: "Liquidity",
    unit: "%",
    description: "Lending aggressiveness vs. deposit base",
    formula: "Total Loans / Total Deposits",
    higherMeans: "Efficient use of deposits",
    lowerMeans: "Liquidity risk if too high",
    historicalData: generateRealisticHistoricalData(85.0, "%", quarters, "stable", "low"),
    peerData: generateRealisticPeerData(85.0, -0.5, -0.2),
    isPopular: true,
  },
  {
    id: "PER",
    name: "P/E Ratio",
    category: "Valuation",
    unit: "x",
    description: "Investor expectations and growth confidence",
    formula: "Market Price per Share / Earnings per Share",
    higherMeans: "High growth expectations",
    lowerMeans: "Weak growth or overvaluation",
    historicalData: generateRealisticHistoricalData(10.5, "x", quarters, "improving", "high"),
    peerData: generateRealisticPeerData(10.5, 0.5, 0.2),
    isPopular: true,
  },
  // Additional metrics (not marked as popular, so they'll be in the "Show More" section)
  {
    id: "ATCE",
    name: "Adjusted Tangible Common Equity/Assets",
    category: "Capital Adequacy",
    unit: "%",
    description: "Measures core tangible equity support",
    formula: "Tangible Common Equity / Total Assets",
    higherMeans: "Strong capital base",
    lowerMeans: "Potential capital inadequacy",
    historicalData: generateRealisticHistoricalData(8.5, "%", quarters, "stable", "low"),
    peerData: generateRealisticPeerData(8.5, 0.05, 0.02),
  },
  {
    id: "NCOR",
    name: "Net Charge-Off Ratio",
    category: "Asset Quality",
    unit: "%",
    description: "Actual loan losses after recoveries",
    formula: "Net Charge-Offs / Average Loans",
    higherMeans: "Aggressive cleanup of bad loans",
    lowerMeans: "Underreporting or weak recovery efforts",
    historicalData: generateRealisticHistoricalData(0.45, "%", quarters, "declining", "medium"),
    peerData: generateRealisticPeerData(0.45, 0.02, 0.01),
  },
  {
    id: "PCR",
    name: "Provision Coverage Ratio (PCR)",
    category: "Asset Quality",
    unit: "%",
    description: "Provisions relative to bad loans",
    formula: "Loan Loss Provisions / Gross NPAs",
    higherMeans: "Prudent provisioning",
    lowerMeans: "Insufficient provisioning",
    historicalData: generateRealisticHistoricalData(75.0, "%", quarters, "improving", "medium"),
    peerData: generateRealisticPeerData(75.0, 1.0, 0.5),
  },
  {
    id: "CASA",
    name: "CASA Ratio",
    category: "Liquidity",
    unit: "%",
    description: "Proportion of low-cost deposits",
    formula: "(Current + Savings Deposits) / Total Deposits",
    higherMeans: "Low funding costs",
    lowerMeans: "More expensive funding",
    historicalData: generateRealisticHistoricalData(42.0, "%", quarters, "improving", "low"),
    peerData: generateRealisticPeerData(42.0, 0.5, 0.2),
  },
  {
    id: "PBR",
    name: "P/B Ratio",
    category: "Valuation",
    unit: "x",
    description: "Market's view of equity value",
    formula: "Market Price per Share / Book Value per Share",
    higherMeans: "Strong investor confidence",
    lowerMeans: "Perceived undervaluation or weak performance",
    historicalData: generateRealisticHistoricalData(1.2, "x", quarters, "stable", "medium"),
    peerData: generateRealisticPeerData(1.2, 0.05, 0.02),
  },
]
